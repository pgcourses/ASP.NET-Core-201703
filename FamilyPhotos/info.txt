1. Modellek szerepe az MVC alkalmazásban

1. a Megjelenítés során (Szerver->Böngészõ)
- A modell-be összegyûjtjük azokat az információkat, amiket meg szeretnénk jeleníteni. 
  Ezt végzi a kontroller.
- Az összegyûjtött adatok a modell-be zárva kerülnek a nézet generátorhoz, 
  amelyik generálja a html-t, közben felhasználja a model adatokat.

2. Az adatbevitel során (Böngészõ->szerver)
- A böngészõ információt küld a szerver felé
  - query string
  - header
  - HTML Form 
  - Az MVC rendszer (a szerver) ehhez a Route Values-t hozzáteszi
Egységes ezekben, hogy név/érték párokba van szervezve az információ

- A szerver megkapja ezt az információt
- A ModelBinder 
	- példányosít a controller/action paramétereinek megfelelõ típusokat
	- Megpróbálja öszerendelni a várakozásainkat a kapott kulcs/érték halmaz egyes elemeivel
	  - primitív típusok esetén a paraméter neve
	  - DTO (Data transfer Object) esetén a property-k neve az összerendelés alapja

	- adatbevitel validációja: ezt a ModelBinder elvégzi a megadott ValidationAttribute-ok alapján, az eredményt 
	  a ControllerBase.ModelState osztály tartalmazza

    - Ha a modellünk érvénytelen, akkor visszaadjuk a browsernek a beviteli oldalt és a hibainformációkat

- Ha érvényes, akkor a modellt feldolgozzuk (elmentjük, módosítunk amit kell, stb.)

- A saját validációt is érdemes Attributum-ként implementálni, így a feladat egy ponton koncentrálódik,
  ráadásul újrafelhasználható is lesz a kód. 

- Model/Viewmodel szétválasztás
  
  megjelenítés <--(viewModel) <----(transzformáció) <---(model) <----(repository) <----(adattárolás)

  A transzformáció polgári neve: automapper

  Az üzembeállításához ezek kellenek:

    - Profile, a konstruktorban van a transzfomációs definíció
	- ezt be kell tölteni

Két fontos link a mai anyaghoz:

Model: 
https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding
https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation

View:
https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor

Megjegyzések a telemetriához és a Glimpse-hez

- A Glimpse jelenleg nem mûködésre bírható, itt még mûködött: 
http://blog.getglimpse.com/2015/11/19/installing-glimpse-v2-beta1/

- a telemetriát két irányban érdemes fejleszteni:
1. Azure Application Insights, ezt az utolsó alkalommal megnézzük

2. ElasticSearch/RabbitMQ/Logstash/Kibana stack használatával: errõl a következõ ElasticSearch dióhéjban
   tanfolyamon lesz szó: http://www.netacademia.hu/ELSfree-elastic-search--nutshell

Hibakezelés

A futtatási környezet lehetséges értékei (Nem case sensitive): Development, Staging, Production
A beállításokról részletesen: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration 

Két szakasza van az alkalmazás futtatásának:

I. Amíg a szerver elindul és szolgáltat
II. És miután elindult

I. Amíg a szerver elindul, a környezettõl függõen kezeli a hibakezelést:
Development: magától adja a teljes hibaüzenetet, különben be kell állítani

II. Alkalmazás indulása után a hibakezeléshez három eszközrendszerünk van:
- visszatérési értékek és hozzájuk tartozó oldalak (app.UseStatusCodepages*)
- Hibakezelési köztes rétegek használata (MiddleWare, ExceptionHandler) https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling
- Hibaszûrõk használata (ErrorFilters) https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters

ezen kívül rögzíteni kéne az utókornak, hogy mi is történt valójában
vagyis:
NAPLÓZÁS
https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging


Layout és stíluslapok használata, bootstrap

Egy kérés kiszolgálásakor az MVC környezet a végsõ HTML-t a következõképpen állítja elõ:

- Megkeresi a Views/_ViewStart.cshtml-t, ha van lefuttatja
- Generálja a View által megadott html részletet
- Ha van beállítva Layout, akkor megkeresi azt az oldalt, és generálja a html-t belõle
- a megfelelõ helyre (@RenderBody által jelölt helyen) beszúrja a nézetünk által generált html részt.

Az így elkészült html meg ki a kliens felé

A korábbi ASP.NET hajszálpontosan ezt csinálja, ugyanez a folyamat és ugyanezek az állomány(ok).

Stílusok/CSS
Korábbi tanfolyamok a témában
http://www.netacademia.hu/htmlkezd%C5%91-hogyan-keszitsunk-weboldalt---kezdo-html-tanfolyam
http://www.netacademia.hu/htmlhttp-html-css-javascript-tanartovabbkepzes
http://www.netacademia.hu/dinamikus-webdesign
http://www.netacademia.hu/html5-programozas
